# .always_forget.txt
# lx5491's easily forgettable LINUX commands and shortcuts, inspired by https://github.com/awdeorio/dotfiles/blob/master/.always_forget.txt

# Machines
hostname                                # name of this computer
uname                                   # operating system name
uname -a                                # info about OS, compiler, etc.
cat /proc/cpuinfo                       # CPU size/features
cat /proc/meminfo                       # memory size/features
uptime                                  # time since power on
dpkg-reconfigure tzdata                 # change system time zone through a pink window
ntpdate ntp.ubuntu.com                  # update system time to Internet time

# System monitoring
ps                                      # report a snapshot of the current processes
ps aux                                  # see every process on the system
top                                     # dynamic view of processes
htop                                    # fancy version of 'top'
dstat -am                               # generate system resource statistics, -a for all but memory and -m for memory
vmstat 1                                # print key statistics of the machine every 1 sec

# Paths
lsof                                    # list open files
cd                                      # change to the home directory
cd ..                                   # chagne to the directory up
cd -                                    # return to the previous directory

# Directory manipulation
tree -a DIR                             # print all files and directories under DIR in tree structure
ls                                      # list directory contents
ls -lah                                 # list directory contents with human readable size, including hidden files

# File permission
chmod xxx FILE                          # change permission for FILE to xxx (x means a digit from 0 to 7)
    * the 3 digits mean permissions for owner, group and others
    * 4 -- read(r)
    * 2 -- write(w)
    * 1 -- execute(x)
chmod u+r FILE                          # add read permission of FILE for owner
chmod g+w FILE                          # add write permission of FILE for group
chmod o+x FILE                          # add execution permission of FILE for others
chmod a-w FILE                          # remove write execution permission of FILE for all

# File manipulation
cut -c2 FILE.txt                        # print 2nd character of each line
cut -c1-3 FILE.txt                      # print 1st to 3rd characters of each line
touch FILE                              # update modification time to NOW
touch FILE                              # create empty file, if it doesn't exist
xxd -b hello.txt                        # see hello.txt in binary form
xxd hello.txt                           # see hello.txt in hexadecimal form
hexdump -C hello.txt                    # see hello.txt in hexadecimal form, same with xxd 'hello.txt'
grep -r SEARCH .                        # recursively search file content
sort file1 | uniq                       # line-wisely sort file1 and find unique patterns
sort file1 file2 | uniq                 # union
sort file1 file2 | uniq -d              # intersection
sort test | uniq -c                     # frequency analysis
head FILE                               # see first 10 lines of FILE
head -n 20 FILE                         # see first 20 lines of FILE
head -n -2 FILE                         # see every line but the last 2 line of FILE
tail FILE                               # see last 10 lines of FILE
tail -n 20 FILE                         # see last 20 lines of FILE
tail -n +2 FILE                         # see FILE from line 2 to the end
tail -f FILE                            # monitor FILE for appends
wc FILE                                 # word, line, character and byte count
wc -l FILE                              # line count
yes > FILE                              # quickly generate a big file

# File manipulation -- find
find /dir -name "pattern"               # find files or directories with "pattern" names under the /dir directory (filename can use *)
find . -name "*.cpp"                    # find all ".cpp" files under the current dir
find . -path "./eecs482*"               # find all files or directories with pathnames starting with "./eecs482"
                                        # note that pathname is absolute pathname if the starting point is also absolute,
                                        # and pathname is relative pathname if the starting point is also relative
find . -perm 755                        # find all files with permission 755 under the current dir
find [path] [conditions to prune] -prune -o [your usual conditions] [actions to perform]
                                        # prune output by removing files with matching conditions
find . -path "./eecs482/p3" -prune -o -name "*.cpp" -print
                                        # find all the ".cpp" files under the current dir except for those under "./
                                        # eecs482/p3" (yes, it not only prunes p3 but all files and directories under it)
find . -type TYPE                       # find all the files or direcotories with the type TYPE under current dir
    Different types:
    * b -- block (buffered) special
    * c -- character (unbuffered) special
    * d -- directory
    * p -- named pipe (FIFO)
    * f -- regular file
    * l -- symbolic link
    * s -- socket

# awk
awk '/abc/ {print $0}' FILE             # print lines containing the word "abc" in FILE
awk '{print $5}' FILE                   # print the 5th field (column) of FILE (separated by spaces and tabs)
awk 'BEGIN { FS = "," }; { print $2 }' FILE # print the 2nd field (column) of FILE, with field separtor being ","
awk 'length($0) > 80 {print $0}' FILE   # print lines whose lengths are greater than 80 characters
awk '{print $NF}' FILE                  # print the last field (column) of each line in FILE
awk '{print length}' FILE               # print length of each line in FILE

# Shell script
#!/bin/bash                             # write as the first line
set -e                                  # write this before all statements to make sure the shell exits immediately when any statement returns with a non-zero status
set -x                                  # write this to print each command when running them, with variables replaced with its real value
echo $PATH                              # print the variable $PATH
export PATH=/opt/bin:$PATH              # prepend '/opt/bin' to $PATH
(.sh)export fname=$1                    # assign the first argument of the shell script to variable $fname
alias lm='ls -lah'                      # set alias for command 'ls -lah' to be lm

# Vagrant
vagrant init ubuntu/trusty64            # initializes a trusty64 vagrant box
vagrant up                              # start the vagrant machine in the current directory
vagrant ssh                             # enters the virtual machine in the current directory using ssh
vagrant halt                            # shut down the machine in the current directory
vagrant destroy                         # destroy the machine
vagrant reload                          # 'vagrant halt' and then 'vagrant up'

# Compression
tar -cjf DIR.tar.bz2 DIR/               # compress directory into tar.bz2 file
tar -xvjf DIR.tar.bz2                   # decompress directory to current directory

# Math utilities
bc                                      # open arbitrary precision calculator language, a.k.a calculator
bc -l                                   # open calculator with pre-defined math routines
[bc] scale = 5                          # set the precision to be 5 digits after a point
expr 1 / 2                              # integer only
let A=1/2                               # integer only
echo "1 / 2" | bc -l                    # floating point

# Git commit
git add hello.txt                       # add hello.txt to the commit
git add -A                              # add all changed files to the commit
git commit -m "my commit"               # commit with message "my commit"
git push origin master                  # push 'master' branch to 'origin' repo

# Git undo
git reset [--soft] HEAD~1               # discard the local commits that are not pushed
git reset --hard <some_commit>          # discard all the changes and go to the state of <some_commit>
git rm --cached hello.txt               # undo git add to hello.txt, without removing file
git rm -r --cached <DIR>                # undo git add recursively to <DIR>, without removing files
git commit --amend                      # change commit message in a text editor if not pushed (e.g. vim)

# Git branch
git branch BRANCH_NAME                  # create a new branch locally called BRANCH_NAME
git checkout BRANCH_NAME                # switch to the branch named BRANCH_NAME
git branch -l                           # list all the local branches
git merge BRANCH_NAME                   # locally merge branch BRANCH_NAME to the current branch
git branch -d BRANCH_NAME               # locally delete BRANCH_NAME
git push origin --delete REMOTE_BRANCH  # delete remote branch

# Git others
git config --global alias.co checkout   # set git command aliases for checkout

# Virtual terminals
tmux                                    # start a tmux terminal
tmux new -s NAME                        # start a new tmux terminal with NAME
tmux a [#]                              # attach to the most recently detached terminal
tmux ls                                 # list sessions
tmux kill-session -t NAME               # kill session NAME
[tmux] Ctr-b d                          # detach

# Shortcuts in zsh("+" means press at the same time, not the button)
ESC + .                                 # retrieve the last argument of the last command in shell
ESC + RETURN                            # inserts a literal newline so you can edit longer commands
CTR + U                                 # cut everything before the cursor
CTR + Y                                 # paste what you cut using "CTR + U"

# SSH
In ~/.ssh/config, set up a shortcut hostname for a remote server:
    Host umich
        HostName login.engin.umich.edu
        User simonxl












